!function(e){var t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(s,r,function(t){return e[t]}.bind(null,r));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";const s=window.ssuData.rest_url;const r={createAttachMeta:function(e,t,n){const r=new XMLHttpRequest;r.onload=()=>{const e=JSON.parse(r.responseText);r.status>=200&&r.status<300?n(null,e):n(e,null)},r.open("POST",s+"ssu/v1/wp-media");const o={"Content-Type":"application/json","Cache-control":"no-cache, no-store, must-revalidate",Pragma:"no-cache"};Object.keys(o).forEach((function(e){r.setRequestHeader(e,o[e])})),window.ssuData&&window.ssuData.nonce&&r.setRequestHeader("X-WP-Nonce",window.ssuData.nonce),r.send(JSON.stringify({signedUrl:t,file:e}))},isFileExisted:function(e,t){const n=new XMLHttpRequest;n.onload=()=>{const e=JSON.parse(n.responseText);n.status>=200&&n.status<300?t(null,e):t(e)},n.open("POST",s+"ssu/v1/s3");const r={"Content-Type":"application/json","Cache-control":"no-cache, no-store, must-revalidate",Pragma:"no-cache"};Object.keys(r).forEach((function(e){n.setRequestHeader(e,r[e])})),window.ssuData&&window.ssuData.nonce&&n.setRequestHeader("X-WP-Nonce",window.ssuData.nonce),n.send(JSON.stringify({file_name:e}))}};t.a=r},function(e,t,n){"use strict";var s=n(0);const r=window.ssuData.messages,o=e=>{if(window.ssuData&&!window.ssuData.enable_restriction)return!0;return e.size<=1e6*window.ssuData.max_file_size};t.a={addMediaCheckBox:function(e){const t=e("<input>",{type:"checkbox",class:"ssu-offload-add-media"});return e("<span>",{class:"ssu-add-media-btn"}).append(t).append("&nbsp;"+r.SSU_ADD_TO_MEDIA_OPT)},createFileBtn:function(e){const t=document.createElement("input");return t.type="file",t.onchange=e.onchange,t},createUploadBtn:function({text:e},t){return t("<a/>",{class:"button btn-ssu btn-ssu-offload",text:e,href:"#",style:"margin-left:8px"})},getSizeForImage:(e,t)=>{let n={};e.type.match(/image\/*/)||t(n);const s=URL.createObjectURL(e),r=new Image;r.onload=()=>{t({width:r.width,height:r.height})},r.src=s},preprocessS3File:(e,t)=>{o(e)?s.a.isFileExisted(e.name,(function(n,s){if(n)return void alert(n.message);let r=e;if(s){const t=e.name.split("."),n=t.pop(),s=Math.round((new Date).getTime()/1e3);t.push(s);const o=`${t.join("-")}.${n}`;r=new File([e],o,{type:e.type})}t(r)})):alert(r.SSU_FILE_MAX_FILE_ERROR)},scrubS3Filename:e=>encodeURIComponent(e),getS3OriginalLink:e=>e?e.split("?")[0]:"",logError:(e,t)=>{console.log("[SSU_ERROR]"+t,e)},isAllowedFileSize:o,MESSAGE:r}},function(e,t,n){"use strict";function s(e){for(var t in e=e||{})e.hasOwnProperty(t)&&(this[t]=e[t]);var n=this.fileElement?this.fileElement.files:this.files||[];this.handleFileSelect(n)}s.prototype.server="",s.prototype.signingUrl="/sign-s3",s.prototype.signingUrlMethod="GET",s.prototype.successResponses=[200,201],s.prototype.fileElement=null,s.prototype.files=null,s.prototype.onFinishS3Put=function(e,t){return console.log("base.onFinishS3Put()",e.publicUrl)},s.prototype.preprocess=function(e,t){return console.log("base.preprocess()",e),t(e)},s.prototype.onProgress=function(e,t,n){return console.log("base.onProgress()",e,t)},s.prototype.onError=function(e,t){return console.log("base.onError()",e)},s.prototype.onSignedUrl=function(e){},s.prototype.scrubFilename=function(e){return e.replace(/[^\w\d_\-\.]+/gi,"")},s.prototype.handleFileSelect=function(e){for(var t=[],n=0;n<e.length;n++){var s=e[n];this.preprocess(s,function(e){return this.onProgress(0,"Waiting",e),t.push(this.uploadFile(e)),t}.bind(this))}},s.prototype.createCORSRequest=function(e,t,n){n=n||{};var s=new XMLHttpRequest;return null!=s.withCredentials?(s.open(e,t,!0),null!=n.withCredentials&&(s.withCredentials=n.withCredentials)):"undefined"!=typeof XDomainRequest?(s=new XDomainRequest).open(e,t):s=null,s},s.prototype._getErrorRequestContext=function(e){return{response:e.responseText,status:e.status,statusText:e.statusText,readyState:e.readyState}},s.prototype.executeOnSignedUrl=function(e,t){var n="?objectName="+this.scrubFilename(e.name)+"&contentType="+encodeURIComponent(e.type);if(this.s3path&&(n+="&path="+encodeURIComponent(this.s3path)),this.signingUrlQueryParams){var s="function"==typeof this.signingUrlQueryParams?this.signingUrlQueryParams():this.signingUrlQueryParams;Object.keys(s).forEach((function(e){var t=s[e];n+="&"+e+"="+t}))}var r=this.createCORSRequest(this.signingUrlMethod,this.server+this.signingUrl+n,{withCredentials:this.signingUrlWithCredentials});if(this.signingUrlHeaders){var o="function"==typeof this.signingUrlHeaders?this.signingUrlHeaders():this.signingUrlHeaders;Object.keys(o).forEach((function(e){var t=o[e];r.setRequestHeader(e,t)}))}return r.overrideMimeType&&r.overrideMimeType("text/plain; charset=x-user-defined"),r.onreadystatechange=function(){if(4===r.readyState&&this.successResponses.indexOf(r.status)>=0){var n;try{n=JSON.parse(r.responseText),this.onSignedUrl(n)}catch(t){return this.onError("Invalid response from server",e,this._getErrorRequestContext(r)),!1}return t(n)}if(4===r.readyState&&this.successResponses.indexOf(r.status)<0)return this.onError("Could not contact request signing server. Status = "+r.status,e,this._getErrorRequestContext(r))}.bind(this),r.send()},s.prototype.uploadToS3=function(e,t){var n=this.createCORSRequest("PUT",t.signedUrl);if(n?(n.onload=function(){return this.successResponses.indexOf(n.status)>=0?(this.onProgress(100,"Upload completed",e),this.onFinishS3Put(t,e)):this.onError("Upload error: "+n.status,e,this._getErrorRequestContext(n))}.bind(this),n.onerror=function(){return this.onError("XHR error",e,this._getErrorRequestContext(n))}.bind(this),n.upload.onprogress=function(t){var n;if(t.lengthComputable)return n=Math.round(t.loaded/t.total*100),this.onProgress(n,100===n?"Finalizing":"Uploading",e)}.bind(this)):this.onError("CORS not supported",e,{}),n.setRequestHeader("Content-Type",e.type),this.contentDisposition){var s=this.contentDisposition;"auto"===s&&(s="image/"===e.type.substr(0,6)?"inline":"attachment");var r=this.scrubFilename(e.name);n.setRequestHeader("Content-Disposition",s+'; filename="'+r+'"')}if(t.headers){var o=t.headers;Object.keys(o).forEach((function(e){var t=o[e];n.setRequestHeader(e,t)}))}if(this.uploadRequestHeaders){var i=this.uploadRequestHeaders;Object.keys(i).forEach((function(e){var t=i[e];n.setRequestHeader(e,t)}))}else n.setRequestHeader("x-amz-acl","public-read");return this.httprequest=n,n.send(e)},s.prototype.uploadFile=function(e){var t=this.uploadToS3.bind(this,e);return this.getSignedUrl?this.getSignedUrl(e,t):this.executeOnSignedUrl(e,t)},s.prototype.abortUpload=function(){this.httprequest&&this.httprequest.abort()},t.a=s},,function(e,t,n){"use strict";n.r(t);var s=n(1),r=n(2),o=n(0);const{createUploadBtn:i,createFileBtn:a,MESSAGE:u,getSizeForImage:c,getS3OriginalLink:l,logError:d,isAllowedFileSize:p}=s.a;var f=function(e){const t=i({text:u.SSU_BUTTON_LABEL},e);return e(t).on("click",(function(t){t.preventDefault();const n=t.target.text;if(n.includes(u.SSU_BUTTON_PROCESS_STATUS)||n.includes(u.SSU_BUTTON_MEDIA_STATUS))return;const s=t;a({onchange:function(t){new r.a({fileElement:t.target,signingUrl:window.ssuData.rest_url+"ssu/v1/s3/sign",signingUrlMethod:"GET",uploadRequestHeaders:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0","X-WP-Nonce":window.ssuData.nonce,contentDisposition:"auto"},onFinishS3Put:function(t,n){const r=t.signedUrl?l(t.signedUrl):"",i=e(e(".woocommerce_options_panel .button.insert").data("row"));if(i.find(".file_name > input[name='_wc_file_names[]']").val(n.name),i.find(".file_name > input[name='_wc_file_hashes[]']").val(""),i.find(".file_url > input[name='_wc_file_urls[]']").val(r),e(".downloadable_files .ui-sortable").append(i),!1===e(".ssu-offload-add-media").prop("checked"))return void(s.target.text=u.SSU_BUTTON_LABEL);s.target.text=u.SSU_BUTTON_MEDIA_STATUS;let a={name:n.name};c(n,(function(e){e.width&&e.height&&(a.width=e.width,a.height=e.height),o.a.createAttachMeta(a,t.signedUrl,(function(e,t){e&&alert(e.message),s.target.text=u.SSU_BUTTON_LABEL}))}))},onProgress:function(e){s.target.text=u.SSU_BUTTON_PROCESS_STATUS+" "+e+"%"},onError:function(e){s.target.text=u.SSU_BUTTON_LABEL,d("Error: "+e,"WOO_UPLOAD_BUTTON"),alert(u.SSU_FILE_UPLOAD_ERROR)},preprocess:function(e,t){p(e)?o.a.isFileExisted(e.name,(function(n,s){if(n)return void alert(n.message);let r=e;if(s){const t=e.name.split("."),n=t.pop(),s=Math.round((new Date).getTime()/1e3);t.push(s);const o=`${t.join("-")}.${n}`;r=new File([e],o,{type:e.type})}t(r)})):alert(u.SSU_FILE_MAX_FILE_ERROR)},scrubFilename:function(e){return encodeURIComponent(e)}})}}).click()})),t};var h=function(e){return{init:function(){this.handleVarProdOptsChange()},handleVarProdOptsChange:function(){var e=document.getElementById("variable_product_options");this.observe(e)},observe:function(e){if(e){var t=this;new MutationObserver((function(){t.renderSSUbtn()})).observe(e,{attributes:!0,childList:!0,characterData:!0,subtree:!0})}},renderSSUbtn:function(){e(".woocommerce_variations .downloadable_files a.button.insert").each((function(t,n){var s=e(n);if(!s.next().attr("data-ssu-woo-var-id")){var r=s.closest(".woocommerce_variable_attributes .data").find(".upload_image a.upload_image_button").attr("rel"),o=e("<a/>",{class:"btn-ssu btn-ssu-offload",text:"Offload to S3",href:"#","data-ssu-woo-var-id":r});s.after(o)}}))}}};const{addMediaCheckBox:g}=s.a;!function(e){const t=h(e);e((function(){t.init();const n=e("a.button.insert");n.after(g(e)),n.after(f(e))}))}(jQuery)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3MzVXBsb2FkLmpzIiwid2VicGFjazovLy8uL3NyYy9zc3VCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJvb3REb21haW4iLCJ3aW5kb3ciLCJzc3VEYXRhIiwicmVzdF91cmwiLCJXUF9BUEkiLCJjcmVhdGVBdHRhY2hNZXRhIiwiZmlsZSIsInNpZ25lZFVybCIsImNiIiwicmVxIiwiWE1MSHR0cFJlcXVlc3QiLCJvbmxvYWQiLCJyZXNwb25zZSIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsIm9wZW4iLCJoZWFkZXJQYXJhbXMiLCJrZXlzIiwiZm9yRWFjaCIsInNldFJlcXVlc3RIZWFkZXIiLCJub25jZSIsInNlbmQiLCJzdHJpbmdpZnkiLCJpc0ZpbGVFeGlzdGVkIiwiZmlsZV9uYW1lIiwiTUVTU0FHRSIsIm1lc3NhZ2VzIiwiaXNBbGxvd2VkRmlsZVNpemUiLCJlbmFibGVfcmVzdHJpY3Rpb24iLCJzaXplIiwibWF4X2ZpbGVfc2l6ZSIsImFkZE1lZGlhQ2hlY2tCb3giLCIkIiwiY2hlY2tib3giLCJhcHBlbmQiLCJTU1VfQUREX1RPX01FRElBX09QVCIsImNyZWF0ZUZpbGVCdG4iLCJvcHRzIiwiaW5wdXQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwib25jaGFuZ2UiLCJjcmVhdGVVcGxvYWRCdG4iLCJ0ZXh0IiwiZ2V0U2l6ZUZvckltYWdlIiwibWF0Y2giLCJ1IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiaW1nIiwiSW1hZ2UiLCJ3aWR0aCIsImhlaWdodCIsInNyYyIsInByZXByb2Nlc3NTM0ZpbGUiLCJuZXh0IiwiZXJyIiwicmVzIiwiYWxlcnQiLCJtZXNzYWdlIiwidXBsb2FkRmlsZSIsInRtcCIsInNwbGl0IiwiZXh0ZW5zaW9ucyIsInBvcCIsInRpbWVzdGFtcCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwicHVzaCIsIm5ld0ZpbGVuYW1lIiwiam9pbiIsIkZpbGUiLCJTU1VfRklMRV9NQVhfRklMRV9FUlJPUiIsInNjcnViUzNGaWxlbmFtZSIsImZpbGVOYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0UzNPcmlnaW5hbExpbmsiLCJsb2dFcnJvciIsImVycm9yIiwiY29udGV4dCIsImNvbnNvbGUiLCJsb2ciLCJTM1VwbG9hZCIsIm9wdGlvbnMiLCJvcHRpb24iLCJ0aGlzIiwiZmlsZXMiLCJmaWxlRWxlbWVudCIsImhhbmRsZUZpbGVTZWxlY3QiLCJzZXJ2ZXIiLCJzaWduaW5nVXJsIiwic2lnbmluZ1VybE1ldGhvZCIsInN1Y2Nlc3NSZXNwb25zZXMiLCJvbkZpbmlzaFMzUHV0Iiwic2lnblJlc3VsdCIsInB1YmxpY1VybCIsInByZXByb2Nlc3MiLCJvblByb2dyZXNzIiwicGVyY2VudCIsIm9uRXJyb3IiLCJvblNpZ25lZFVybCIsInJlc3VsdCIsInNjcnViRmlsZW5hbWUiLCJmaWxlbmFtZSIsInJlcGxhY2UiLCJsZW5ndGgiLCJwcm9jZXNzZWRGaWxlIiwiY3JlYXRlQ09SU1JlcXVlc3QiLCJtZXRob2QiLCJ1cmwiLCJ4aHIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJYRG9tYWluUmVxdWVzdCIsIl9nZXRFcnJvclJlcXVlc3RDb250ZXh0Iiwic3RhdHVzVGV4dCIsInJlYWR5U3RhdGUiLCJleGVjdXRlT25TaWduZWRVcmwiLCJjYWxsYmFjayIsInF1ZXJ5U3RyaW5nIiwiczNwYXRoIiwic2lnbmluZ1VybFF1ZXJ5UGFyYW1zIiwidmFsIiwic2lnbmluZ1VybFdpdGhDcmVkZW50aWFscyIsInNpZ25pbmdVcmxIZWFkZXJzIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImluZGV4T2YiLCJ1cGxvYWRUb1MzIiwib25lcnJvciIsInVwbG9hZCIsIm9ucHJvZ3Jlc3MiLCJlIiwicGVyY2VudExvYWRlZCIsImxlbmd0aENvbXB1dGFibGUiLCJsb2FkZWQiLCJ0b3RhbCIsImNvbnRlbnREaXNwb3NpdGlvbiIsImRpc3Bvc2l0aW9uIiwic3Vic3RyIiwiaGVhZGVycyIsInNpZ25SZXN1bHRIZWFkZXJzIiwidXBsb2FkUmVxdWVzdEhlYWRlcnMiLCJodHRwcmVxdWVzdCIsInVwbG9hZFRvUzNDYWxsYmFjayIsImdldFNpZ25lZFVybCIsImFib3J0VXBsb2FkIiwiYWJvcnQiLCJzc3VCdG4iLCJTU1VfQlVUVE9OX0xBQkVMIiwib24iLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsImJ0blRleHQiLCJ0YXJnZXQiLCJpbmNsdWRlcyIsIlNTVV9CVVRUT05fUFJPQ0VTU19TVEFUVVMiLCJTU1VfQlVUVE9OX01FRElBX1NUQVRVUyIsIlByYWdtYSIsIkV4cGlyZXMiLCJsaW5rIiwiYnRuSW5zZXJ0IiwiZGF0YSIsImZpbmQiLCJwcm9wIiwiU1NVX0ZJTEVfVVBMT0FEX0VSUk9SIiwiY2xpY2siLCJpbml0IiwiaGFuZGxlVmFyUHJvZE9wdHNDaGFuZ2UiLCJwYXJlbnROb2RlIiwiZ2V0RWxlbWVudEJ5SWQiLCJvYnNlcnZlIiwic2VsZiIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJyZW5kZXJTU1VidG4iLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJlYWNoIiwiYnRuIiwiJGNhY2hlSW5zZXJ0QnRuIiwiYXR0ciIsInZhcmlhdGlvbklEIiwiY2xvc2VzdCIsImFmdGVyIiwiYXBwIiwiJGluc2VydEJ0biIsImpRdWVyeSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJ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LHVDQUNMbUIsS0FBSyxPQUNKbEMsRUFBU3RILEVBQUUsT0FBUSxDQUNyQixNQUFTLDBCQUNULEtBQVEsZ0JBQ1IsS0FBUSxJQUNSLHNCQUF1QnlKLElBRXpCRixFQUFnQkksTUFBTXJDLFVDdkN4QixNQUFNLGlCQUFFdkgsR0FBcUIsS0FFN0IsU0FBV0MsR0FFVCxNQUFNNEosRUFBTSxFQUFJNUosR0FDaEJBLEdBQUUsV0FDSDRKLEVBQUluQixPQUNKLE1BQU1vQixFQUFhN0osRUFBRSxtQkFDckI2SixFQUFXRixNQUFNNUosRUFBaUJDLElBQ2xDNkosRUFBV0YsTUFBTSxFQUFPM0osT0FQekIsQ0FTRzhKIiwiZmlsZSI6InNzdS1idG4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuIiwiY29uc3Qgcm9vdERvbWFpbiA9IHdpbmRvdy5zc3VEYXRhLnJlc3RfdXJsO1xuXG5mdW5jdGlvbiBnZXRSZXFIZWFkZXJzKCkge1xuICByZXR1cm4ge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG5cdCdDYWNoZS1jb250cm9sJzogJ25vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlJyxcblx0J1ByYWdtYSc6ICduby1jYWNoZScsXG4gIH1cbn1cblxuY29uc3QgV1BfQVBJID0ge1xuICBjcmVhdGVBdHRhY2hNZXRhOiBmdW5jdGlvbiAoZmlsZSwgc2lnbmVkVXJsLCBjYikge1xuXHRjb25zdCByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0cmVxLm9ubG9hZCA9ICgpID0+IHtcblx0ICBjb25zdCByZXNwb25zZSA9IEpTT04ucGFyc2UocmVxLnJlc3BvbnNlVGV4dCk7XG5cdCAgaWYgKHJlcS5zdGF0dXMgPj0gMjAwICYmIHJlcS5zdGF0dXMgPCAzMDApIHtcblx0XHRjYihudWxsLCByZXNwb25zZSk7XG5cdFx0cmV0dXJuO1xuXHQgIH1cblx0ICBjYihyZXNwb25zZSwgbnVsbCk7XG5cdH1cblxuXHRyZXEub3BlbignUE9TVCcsIGAke3Jvb3REb21haW59c3N1L3YxL3dwLW1lZGlhYCk7XG5cdGNvbnN0IGhlYWRlclBhcmFtcyA9IGdldFJlcUhlYWRlcnMoKTtcblx0T2JqZWN0LmtleXMoaGVhZGVyUGFyYW1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0ICByZXEuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlclBhcmFtc1trZXldKTtcblx0fSk7XG5cdGlmICh3aW5kb3cuc3N1RGF0YSAmJiB3aW5kb3cuc3N1RGF0YS5ub25jZSkge1xuXHQgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdYLVdQLU5vbmNlJywgd2luZG93LnNzdURhdGEubm9uY2UpO1xuXHR9XG5cdHJlcS5zZW5kKEpTT04uc3RyaW5naWZ5KHtcblx0ICBcInNpZ25lZFVybFwiOiBzaWduZWRVcmwsXG5cdCAgXCJmaWxlXCI6IGZpbGVcblx0fSkpO1xuICB9LFxuICBpc0ZpbGVFeGlzdGVkOiBmdW5jdGlvbiAobmFtZSwgY2IpIHtcblx0Y29uc3QgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdHJlcS5vbmxvYWQgPSAoKSA9PiB7XG5cdCAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlcS5yZXNwb25zZVRleHQpO1xuXHQgIGlmIChyZXEuc3RhdHVzID49IDIwMCAmJiByZXEuc3RhdHVzIDwgMzAwKSB7XG5cdFx0Y2IobnVsbCwgcmVzcG9uc2UpO1xuXHRcdHJldHVybjtcblx0ICB9XG5cdCAgY2IocmVzcG9uc2UpO1xuXHR9XG5cblx0cmVxLm9wZW4oJ1BPU1QnLCBgJHtyb290RG9tYWlufXNzdS92MS9zM2ApO1xuXHRjb25zdCBoZWFkZXJQYXJhbXMgPSBnZXRSZXFIZWFkZXJzKCk7XG5cdE9iamVjdC5rZXlzKGhlYWRlclBhcmFtcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgcmVxLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBoZWFkZXJQYXJhbXNba2V5XSk7XG5cdH0pO1xuXHRpZiAod2luZG93LnNzdURhdGEgJiYgd2luZG93LnNzdURhdGEubm9uY2UpIHtcblx0ICByZXEuc2V0UmVxdWVzdEhlYWRlcignWC1XUC1Ob25jZScsIHdpbmRvdy5zc3VEYXRhLm5vbmNlKTtcblx0fVxuXHRyZXEuc2VuZChKU09OLnN0cmluZ2lmeSh7XG5cdCAgZmlsZV9uYW1lOiBuYW1lLFxuXHR9KSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV1BfQVBJO1xuIiwiaW1wb3J0IFdQX0FQSSBmcm9tIFwiLi9hcGlcIjtcblxuY29uc3QgYWRkTWVkaWFDaGVja0JveCA9IGZ1bmN0aW9uICgkKSB7XG4gIGNvbnN0IGNoZWNrYm94ID0gJChcIjxpbnB1dD5cIiwge1xuXHRcInR5cGVcIjogXCJjaGVja2JveFwiLFxuXHRcImNsYXNzXCI6IFwic3N1LW9mZmxvYWQtYWRkLW1lZGlhXCIsXG4gIH0pXG5cbiAgY29uc3Qgc3BhbiA9ICQoXCI8c3Bhbj5cIiwge1xuICAgIFwiY2xhc3NcIjogXCJzc3UtYWRkLW1lZGlhLWJ0blwiLFxuICB9KS5hcHBlbmQoY2hlY2tib3gpLmFwcGVuZChcIiZuYnNwO1wiICsgTUVTU0FHRS5TU1VfQUREX1RPX01FRElBX09QVCk7XG5cbiAgcmV0dXJuIHNwYW47XG59O1xuXG5jb25zdCBjcmVhdGVGaWxlQnRuID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBpbnB1dC50eXBlID0gJ2ZpbGUnO1xuICBpbnB1dC5vbmNoYW5nZSA9IG9wdHMub25jaGFuZ2U7XG4gIHJldHVybiBpbnB1dDtcbn1cblxuY29uc3QgY3JlYXRlVXBsb2FkQnRuID0gZnVuY3Rpb24gKHt0ZXh0fSwgJCkge1xuICByZXR1cm4gJChcIjxhLz5cIiwge1xuXHRcImNsYXNzXCI6IFwiYnV0dG9uIGJ0bi1zc3UgYnRuLXNzdS1vZmZsb2FkXCIsXG5cdFwidGV4dFwiOiB0ZXh0LFxuXHRcImhyZWZcIjogXCIjXCIsXG5cdFwic3R5bGVcIjogXCJtYXJnaW4tbGVmdDo4cHhcIlxuICB9KTtcbn1cblxuY29uc3QgTUVTU0FHRSA9IHdpbmRvdy5zc3VEYXRhLm1lc3NhZ2VzO1xuXG5jb25zdCBnZXRTaXplRm9ySW1hZ2UgPSAoZmlsZSwgY2IpID0+IHtcbiAgbGV0IHNpemUgPSB7fTtcbiAgaWYoIWZpbGUudHlwZS5tYXRjaCgvaW1hZ2VcXC8qLykpIHtcbiAgICBjYihzaXplKTtcbiAgfVxuXG4gIGNvbnN0IHUgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xuICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICBjYih7XG5cdCAgd2lkdGg6IGltZy53aWR0aCxcblx0ICBoZWlnaHQ6IGltZy5oZWlnaHQsXG5cdH0pXG4gIH07XG5cbiAgaW1nLnNyYyA9IHU7XG59XG5cbmNvbnN0IHByZXByb2Nlc3NTM0ZpbGUgPSAoZmlsZSwgbmV4dCkgPT4ge1xuICBpZighaXNBbGxvd2VkRmlsZVNpemUoZmlsZSkpIHtcblx0YWxlcnQoTUVTU0FHRS5TU1VfRklMRV9NQVhfRklMRV9FUlJPUik7XG5cdHJldHVybjtcbiAgfVxuXG4gIFdQX0FQSS5pc0ZpbGVFeGlzdGVkKGZpbGUubmFtZSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG5cdGlmIChlcnIpIHtcblx0ICBhbGVydChlcnIubWVzc2FnZSk7XG5cdCAgcmV0dXJuO1xuXHR9XG5cdGxldCB1cGxvYWRGaWxlID0gZmlsZTtcblx0aWYgKHJlcykge1xuXHQgIGNvbnN0IHRtcCA9IGZpbGUubmFtZS5zcGxpdCgnLicpO1xuXHQgIGNvbnN0IGV4dGVuc2lvbnMgPSB0bXAucG9wKCk7XG5cdCAgY29uc3QgdGltZXN0YW1wID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCk7XG5cdCAgdG1wLnB1c2godGltZXN0YW1wKTtcblx0ICBjb25zdCBuZXdGaWxlbmFtZSA9IGAke3RtcC5qb2luKCctJyl9LiR7ZXh0ZW5zaW9uc31gO1xuXG5cdCAgLy8gUmVuYW1lIHRoZSBGaWxlIGluIGphdmFzY3JpcHQgKGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwNzMzOTA0L3JlbmFtaW5nLWEtZmlsZS1vYmplY3QtaW4tamF2YXNjcmlwdClcblx0ICB1cGxvYWRGaWxlID0gbmV3IEZpbGUoW2ZpbGVdLCBuZXdGaWxlbmFtZSwge3R5cGU6IGZpbGUudHlwZX0pO1xuXHR9XG5cdG5leHQodXBsb2FkRmlsZSk7XG4gIH0pO1xufVxuXG5jb25zdCBzY3J1YlMzRmlsZW5hbWUgPSAoZmlsZU5hbWUpID0+IHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChmaWxlTmFtZSk7XG59XG5cbmNvbnN0IGdldFMzT3JpZ2luYWxMaW5rID0gKHNpZ25lZFVybCkgPT4ge1xuICByZXR1cm4gc2lnbmVkVXJsID8gc2lnbmVkVXJsLnNwbGl0KCc/JylbMF0gOiAnJztcbn1cblxuY29uc3QgbG9nRXJyb3IgPSAoZXJyb3IsIGNvbnRleHQpID0+IHtcbiAgY29uc29sZS5sb2coYFtTU1VfRVJST1JdJHtjb250ZXh0fWAsIGVycm9yKTtcbn1cblxuY29uc3QgaXNBbGxvd2VkRmlsZVNpemUgPSAoZmlsZSkgPT4ge1xuICBpZiAod2luZG93LnNzdURhdGEgJiYgIXdpbmRvdy5zc3VEYXRhLmVuYWJsZV9yZXN0cmljdGlvbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3Qgb25lTWJUb0J5ZSA9IDEwMDAwMDA7XG4gIHJldHVybiBmaWxlLnNpemUgPD0gd2luZG93LnNzdURhdGEubWF4X2ZpbGVfc2l6ZSAqIG9uZU1iVG9CeWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWRkTWVkaWFDaGVja0JveCxcbiAgY3JlYXRlRmlsZUJ0bixcbiAgY3JlYXRlVXBsb2FkQnRuLFxuICBnZXRTaXplRm9ySW1hZ2UsXG4gIHByZXByb2Nlc3NTM0ZpbGUsXG4gIHNjcnViUzNGaWxlbmFtZSxcbiAgZ2V0UzNPcmlnaW5hbExpbmssXG4gIGxvZ0Vycm9yLFxuICBpc0FsbG93ZWRGaWxlU2l6ZSxcbiAgTUVTU0FHRVxufVxuIiwiUzNVcGxvYWQucHJvdG90eXBlLnNlcnZlciA9ICcnO1xuUzNVcGxvYWQucHJvdG90eXBlLnNpZ25pbmdVcmwgPSAnL3NpZ24tczMnO1xuUzNVcGxvYWQucHJvdG90eXBlLnNpZ25pbmdVcmxNZXRob2QgPSAnR0VUJztcblMzVXBsb2FkLnByb3RvdHlwZS5zdWNjZXNzUmVzcG9uc2VzID0gWzIwMCwgMjAxXTtcblMzVXBsb2FkLnByb3RvdHlwZS5maWxlRWxlbWVudCA9IG51bGw7XG5TM1VwbG9hZC5wcm90b3R5cGUuZmlsZXMgPSBudWxsO1xuXG5TM1VwbG9hZC5wcm90b3R5cGUub25GaW5pc2hTM1B1dCA9IGZ1bmN0aW9uKHNpZ25SZXN1bHQsIGZpbGUpIHtcbiAgcmV0dXJuIGNvbnNvbGUubG9nKCdiYXNlLm9uRmluaXNoUzNQdXQoKScsIHNpZ25SZXN1bHQucHVibGljVXJsKTtcbn07XG5cblMzVXBsb2FkLnByb3RvdHlwZS5wcmVwcm9jZXNzID0gZnVuY3Rpb24oZmlsZSwgbmV4dCkge1xuICBjb25zb2xlLmxvZygnYmFzZS5wcmVwcm9jZXNzKCknLCBmaWxlKTtcbiAgcmV0dXJuIG5leHQoZmlsZSk7XG59O1xuXG5TM1VwbG9hZC5wcm90b3R5cGUub25Qcm9ncmVzcyA9IGZ1bmN0aW9uKHBlcmNlbnQsIHN0YXR1cywgZmlsZSkge1xuICByZXR1cm4gY29uc29sZS5sb2coJ2Jhc2Uub25Qcm9ncmVzcygpJywgcGVyY2VudCwgc3RhdHVzKTtcbn07XG5cblMzVXBsb2FkLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24oc3RhdHVzLCBmaWxlKSB7XG4gIHJldHVybiBjb25zb2xlLmxvZygnYmFzZS5vbkVycm9yKCknLCBzdGF0dXMpO1xufTtcblxuUzNVcGxvYWQucHJvdG90eXBlLm9uU2lnbmVkVXJsID0gZnVuY3Rpb24ocmVzdWx0KSB7fTtcblxuUzNVcGxvYWQucHJvdG90eXBlLnNjcnViRmlsZW5hbWUgPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICByZXR1cm4gZmlsZW5hbWUucmVwbGFjZSgvW15cXHdcXGRfXFwtXFwuXSsvaWcsICcnKTtcbn07XG5cbmZ1bmN0aW9uIFMzVXBsb2FkKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcblx0ICB0aGlzW29wdGlvbl0gPSBvcHRpb25zW29wdGlvbl07XG5cdH1cbiAgfVxuICB2YXIgZmlsZXMgPSB0aGlzLmZpbGVFbGVtZW50ID8gdGhpcy5maWxlRWxlbWVudC5maWxlcyA6IHRoaXMuZmlsZXMgfHwgW107XG4gIHRoaXMuaGFuZGxlRmlsZVNlbGVjdChmaWxlcyk7XG59XG5cblMzVXBsb2FkLnByb3RvdHlwZS5oYW5kbGVGaWxlU2VsZWN0ID0gZnVuY3Rpb24oZmlsZXMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpPTA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuXHR2YXIgZmlsZSA9IGZpbGVzW2ldO1xuXHR0aGlzLnByZXByb2Nlc3MoZmlsZSwgZnVuY3Rpb24ocHJvY2Vzc2VkRmlsZSl7XG5cdCAgdGhpcy5vblByb2dyZXNzKDAsICdXYWl0aW5nJywgcHJvY2Vzc2VkRmlsZSk7XG5cdCAgcmVzdWx0LnB1c2godGhpcy51cGxvYWRGaWxlKHByb2Nlc3NlZEZpbGUpKTtcblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9LmJpbmQodGhpcykpO1xuICB9XG59O1xuXG5TM1VwbG9hZC5wcm90b3R5cGUuY3JlYXRlQ09SU1JlcXVlc3QgPSBmdW5jdGlvbihtZXRob2QsIHVybCwgb3B0cykge1xuICB2YXIgb3B0cyA9IG9wdHMgfHwge307XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICBpZiAoeGhyLndpdGhDcmVkZW50aWFscyAhPSBudWxsKSB7XG5cdHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcblx0aWYgKG9wdHMud2l0aENyZWRlbnRpYWxzICE9IG51bGwpIHtcblx0ICB4aHIud2l0aENyZWRlbnRpYWxzID0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG5cdH1cbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0eGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG5cdHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgfVxuICBlbHNlIHtcblx0eGhyID0gbnVsbDtcbiAgfVxuICByZXR1cm4geGhyO1xufTtcblxuUzNVcGxvYWQucHJvdG90eXBlLl9nZXRFcnJvclJlcXVlc3RDb250ZXh0ID0gZnVuY3Rpb24gKHhocikge1xuICByZXR1cm4ge1xuXHRyZXNwb25zZTogeGhyLnJlc3BvbnNlVGV4dCxcblx0c3RhdHVzOiB4aHIuc3RhdHVzLFxuXHRzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcblx0cmVhZHlTdGF0ZTogeGhyLnJlYWR5U3RhdGVcbiAgfTtcbn1cblxuUzNVcGxvYWQucHJvdG90eXBlLmV4ZWN1dGVPblNpZ25lZFVybCA9IGZ1bmN0aW9uKGZpbGUsIGNhbGxiYWNrKSB7XG4gIHZhciBmaWxlTmFtZSA9IHRoaXMuc2NydWJGaWxlbmFtZShmaWxlLm5hbWUpO1xuICB2YXIgcXVlcnlTdHJpbmcgPSAnP29iamVjdE5hbWU9JyArIGZpbGVOYW1lICsgJyZjb250ZW50VHlwZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbGUudHlwZSk7XG4gIGlmICh0aGlzLnMzcGF0aCkge1xuXHRxdWVyeVN0cmluZyArPSAnJnBhdGg9JyArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnMzcGF0aCk7XG4gIH1cbiAgaWYgKHRoaXMuc2lnbmluZ1VybFF1ZXJ5UGFyYW1zKSB7XG5cdHZhciBzaWduaW5nVXJsUXVlcnlQYXJhbXMgPSB0eXBlb2YgdGhpcy5zaWduaW5nVXJsUXVlcnlQYXJhbXMgPT09ICdmdW5jdGlvbicgPyB0aGlzLnNpZ25pbmdVcmxRdWVyeVBhcmFtcygpIDogdGhpcy5zaWduaW5nVXJsUXVlcnlQYXJhbXM7XG5cdE9iamVjdC5rZXlzKHNpZ25pbmdVcmxRdWVyeVBhcmFtcykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0ICB2YXIgdmFsID0gc2lnbmluZ1VybFF1ZXJ5UGFyYW1zW2tleV07XG5cdCAgcXVlcnlTdHJpbmcgKz0gJyYnICsga2V5ICsgJz0nICsgdmFsO1xuXHR9KTtcbiAgfVxuICB2YXIgeGhyID0gdGhpcy5jcmVhdGVDT1JTUmVxdWVzdCh0aGlzLnNpZ25pbmdVcmxNZXRob2QsXG5cdHRoaXMuc2VydmVyICsgdGhpcy5zaWduaW5nVXJsICsgcXVlcnlTdHJpbmcsIHsgd2l0aENyZWRlbnRpYWxzOiB0aGlzLnNpZ25pbmdVcmxXaXRoQ3JlZGVudGlhbHMgfSk7XG4gIGlmICh0aGlzLnNpZ25pbmdVcmxIZWFkZXJzKSB7XG5cdHZhciBzaWduaW5nVXJsSGVhZGVycyA9IHR5cGVvZiB0aGlzLnNpZ25pbmdVcmxIZWFkZXJzID09PSAnZnVuY3Rpb24nID8gdGhpcy5zaWduaW5nVXJsSGVhZGVycygpIDogdGhpcy5zaWduaW5nVXJsSGVhZGVycztcblx0T2JqZWN0LmtleXMoc2lnbmluZ1VybEhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdCAgdmFyIHZhbCA9IHNpZ25pbmdVcmxIZWFkZXJzW2tleV07XG5cdCAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuXHR9KTtcbiAgfVxuICB4aHIub3ZlcnJpZGVNaW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSgndGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZCcpO1xuICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiB0aGlzLnN1Y2Nlc3NSZXNwb25zZXMuaW5kZXhPZih4aHIuc3RhdHVzKSA+PSAwKSB7XG5cdCAgdmFyIHJlc3VsdDtcblx0ICB0cnkge1xuXHRcdHJlc3VsdCA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG5cdFx0dGhpcy5vblNpZ25lZFVybCggcmVzdWx0ICk7XG5cdCAgfSBjYXRjaCAoZXJyb3IpIHtcblx0XHR0aGlzLm9uRXJyb3IoXG5cdFx0ICAnSW52YWxpZCByZXNwb25zZSBmcm9tIHNlcnZlcicsXG5cdFx0ICBmaWxlLFxuXHRcdCAgdGhpcy5fZ2V0RXJyb3JSZXF1ZXN0Q29udGV4dCh4aHIpXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHQgIHJldHVybiBjYWxsYmFjayhyZXN1bHQpO1xuXHR9IGVsc2UgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHRoaXMuc3VjY2Vzc1Jlc3BvbnNlcy5pbmRleE9mKHhoci5zdGF0dXMpIDwgMCkge1xuXHQgIHJldHVybiB0aGlzLm9uRXJyb3IoXG5cdFx0J0NvdWxkIG5vdCBjb250YWN0IHJlcXVlc3Qgc2lnbmluZyBzZXJ2ZXIuIFN0YXR1cyA9ICcgKyB4aHIuc3RhdHVzLFxuXHRcdGZpbGUsXG5cdFx0dGhpcy5fZ2V0RXJyb3JSZXF1ZXN0Q29udGV4dCh4aHIpXG5cdCAgKTtcblx0fVxuICB9LmJpbmQodGhpcyk7XG4gIHJldHVybiB4aHIuc2VuZCgpO1xufTtcblxuUzNVcGxvYWQucHJvdG90eXBlLnVwbG9hZFRvUzMgPSBmdW5jdGlvbihmaWxlLCBzaWduUmVzdWx0KSB7XG4gIHZhciB4aHIgPSB0aGlzLmNyZWF0ZUNPUlNSZXF1ZXN0KCdQVVQnLCBzaWduUmVzdWx0LnNpZ25lZFVybCk7XG4gIGlmICgheGhyKSB7XG5cdHRoaXMub25FcnJvcignQ09SUyBub3Qgc3VwcG9ydGVkJywgZmlsZSwge30pO1xuICB9IGVsc2Uge1xuXHR4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cdCAgaWYgKHRoaXMuc3VjY2Vzc1Jlc3BvbnNlcy5pbmRleE9mKHhoci5zdGF0dXMpID49IDApIHtcblx0XHR0aGlzLm9uUHJvZ3Jlc3MoMTAwLCAnVXBsb2FkIGNvbXBsZXRlZCcsIGZpbGUpO1xuXHRcdHJldHVybiB0aGlzLm9uRmluaXNoUzNQdXQoc2lnblJlc3VsdCwgZmlsZSk7XG5cdCAgfSBlbHNlIHtcblx0XHRyZXR1cm4gdGhpcy5vbkVycm9yKFxuXHRcdCAgJ1VwbG9hZCBlcnJvcjogJyArIHhoci5zdGF0dXMsXG5cdFx0ICBmaWxlLFxuXHRcdCAgdGhpcy5fZ2V0RXJyb3JSZXF1ZXN0Q29udGV4dCh4aHIpXG5cdFx0KTtcblx0ICB9XG5cdH0uYmluZCh0aGlzKTtcblx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4gdGhpcy5vbkVycm9yKFxuXHRcdCdYSFIgZXJyb3InLFxuXHRcdGZpbGUsXG5cdFx0dGhpcy5fZ2V0RXJyb3JSZXF1ZXN0Q29udGV4dCh4aHIpXG5cdCAgKTtcblx0fS5iaW5kKHRoaXMpO1xuXHR4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbihlKSB7XG5cdCAgdmFyIHBlcmNlbnRMb2FkZWQ7XG5cdCAgaWYgKGUubGVuZ3RoQ29tcHV0YWJsZSkge1xuXHRcdHBlcmNlbnRMb2FkZWQgPSBNYXRoLnJvdW5kKChlLmxvYWRlZCAvIGUudG90YWwpICogMTAwKTtcblx0XHRyZXR1cm4gdGhpcy5vblByb2dyZXNzKHBlcmNlbnRMb2FkZWQsIHBlcmNlbnRMb2FkZWQgPT09IDEwMCA/ICdGaW5hbGl6aW5nJyA6ICdVcGxvYWRpbmcnLCBmaWxlKTtcblx0ICB9XG5cdH0uYmluZCh0aGlzKTtcbiAgfVxuICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgZmlsZS50eXBlKTtcbiAgaWYgKHRoaXMuY29udGVudERpc3Bvc2l0aW9uKSB7XG5cdHZhciBkaXNwb3NpdGlvbiA9IHRoaXMuY29udGVudERpc3Bvc2l0aW9uO1xuXHRpZiAoZGlzcG9zaXRpb24gPT09ICdhdXRvJykge1xuXHQgIGlmIChmaWxlLnR5cGUuc3Vic3RyKDAsIDYpID09PSAnaW1hZ2UvJykge1xuXHRcdGRpc3Bvc2l0aW9uID0gJ2lubGluZSc7XG5cdCAgfSBlbHNlIHtcblx0XHRkaXNwb3NpdGlvbiA9ICdhdHRhY2htZW50Jztcblx0ICB9XG5cdH1cblxuXHR2YXIgZmlsZU5hbWUgPSB0aGlzLnNjcnViRmlsZW5hbWUoZmlsZS5uYW1lKVxuXHR4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsIGRpc3Bvc2l0aW9uICsgJzsgZmlsZW5hbWU9XCInICsgZmlsZU5hbWUgKyAnXCInKTtcbiAgfVxuICBpZiAoc2lnblJlc3VsdC5oZWFkZXJzKSB7XG5cdHZhciBzaWduUmVzdWx0SGVhZGVycyA9IHNpZ25SZXN1bHQuaGVhZGVyc1xuXHRPYmplY3Qua2V5cyhzaWduUmVzdWx0SGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0ICB2YXIgdmFsID0gc2lnblJlc3VsdEhlYWRlcnNba2V5XTtcblx0ICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG5cdH0pXG4gIH1cbiAgaWYgKHRoaXMudXBsb2FkUmVxdWVzdEhlYWRlcnMpIHtcblx0dmFyIHVwbG9hZFJlcXVlc3RIZWFkZXJzID0gdGhpcy51cGxvYWRSZXF1ZXN0SGVhZGVycztcblx0T2JqZWN0LmtleXModXBsb2FkUmVxdWVzdEhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdCAgdmFyIHZhbCA9IHVwbG9hZFJlcXVlc3RIZWFkZXJzW2tleV07XG5cdCAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuXHR9KTtcbiAgfSBlbHNlIHtcblx0eGhyLnNldFJlcXVlc3RIZWFkZXIoJ3gtYW16LWFjbCcsICdwdWJsaWMtcmVhZCcpO1xuICB9XG4gIHRoaXMuaHR0cHJlcXVlc3QgPSB4aHI7XG4gIHJldHVybiB4aHIuc2VuZChmaWxlKTtcbn07XG5cblMzVXBsb2FkLnByb3RvdHlwZS51cGxvYWRGaWxlID0gZnVuY3Rpb24oZmlsZSkge1xuICB2YXIgdXBsb2FkVG9TM0NhbGxiYWNrID0gdGhpcy51cGxvYWRUb1MzLmJpbmQodGhpcywgZmlsZSk7XG5cbiAgaWYodGhpcy5nZXRTaWduZWRVcmwpIHJldHVybiB0aGlzLmdldFNpZ25lZFVybChmaWxlLCB1cGxvYWRUb1MzQ2FsbGJhY2spO1xuICByZXR1cm4gdGhpcy5leGVjdXRlT25TaWduZWRVcmwoZmlsZSwgdXBsb2FkVG9TM0NhbGxiYWNrKTtcbn07XG5cblMzVXBsb2FkLnByb3RvdHlwZS5hYm9ydFVwbG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmh0dHByZXF1ZXN0ICYmIHRoaXMuaHR0cHJlcXVlc3QuYWJvcnQoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFMzVXBsb2FkO1xuIiwiaW1wb3J0IFMzVXBsb2FkIGZyb20gJy4vczNVcGxvYWQnO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IFdQX0FQSSBmcm9tICcuL2FwaSc7XG5cbmNvbnN0IHtjcmVhdGVVcGxvYWRCdG4sIGNyZWF0ZUZpbGVCdG4sIE1FU1NBR0UsIGdldFNpemVGb3JJbWFnZSwgZ2V0UzNPcmlnaW5hbExpbmssIGxvZ0Vycm9yLCBpc0FsbG93ZWRGaWxlU2l6ZX0gPSBVdGlscztcbmNvbnN0IHNzdUJ1dHRvbiA9IGZ1bmN0aW9uICgkKSB7XG4gIGNvbnN0IHNzdUJ0biA9IGNyZWF0ZVVwbG9hZEJ0bih7XG4gICAgdGV4dDogTUVTU0FHRS5TU1VfQlVUVE9OX0xBQkVMLFxuICB9LCAkKTtcblxuICAkKHNzdUJ0bikub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGJ0blRleHQgPSBldnQudGFyZ2V0LnRleHQ7XG4gICAgaWYgKGJ0blRleHQuaW5jbHVkZXMoTUVTU0FHRS5TU1VfQlVUVE9OX1BST0NFU1NfU1RBVFVTKSB8fFxuICAgICAgYnRuVGV4dC5pbmNsdWRlcyhNRVNTQUdFLlNTVV9CVVRUT05fTUVESUFfU1RBVFVTKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzc3VCdG4gPSBldnQ7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gY3JlYXRlRmlsZUJ0bih7XG4gICAgICBvbmNoYW5nZTogZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBuZXcgUzNVcGxvYWQoe1xuICAgICAgICAgIGZpbGVFbGVtZW50OiBldnQudGFyZ2V0LFxuICAgICAgICAgIHNpZ25pbmdVcmw6IHdpbmRvdy5zc3VEYXRhLnJlc3RfdXJsICsgJ3NzdS92MS9zMy9zaWduJyxcbiAgICAgICAgICBzaWduaW5nVXJsTWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICB1cGxvYWRSZXF1ZXN0SGVhZGVyczoge1xuICAgICAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUsIG5vLXN0b3JlLCBtdXN0LXJldmFsaWRhdGUnLFxuICAgICAgICAgICAgUHJhZ21hOiAnbm8tY2FjaGUnLFxuICAgICAgICAgICAgRXhwaXJlczogJzAnLFxuICAgICAgICAgICAgJ1gtV1AtTm9uY2UnOiB3aW5kb3cuc3N1RGF0YS5ub25jZSxcbiAgICAgICAgICAgIGNvbnRlbnREaXNwb3NpdGlvbjogJ2F1dG8nLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25GaW5pc2hTM1B1dDogZnVuY3Rpb24gKHNpZ25SZXN1bHQsIGZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBzaWduUmVzdWx0LnNpZ25lZFVybCA/IGdldFMzT3JpZ2luYWxMaW5rKFxuICAgICAgICAgICAgICBzaWduUmVzdWx0LnNpZ25lZFVybCkgOiAnJztcbiAgICAgICAgICAgIGNvbnN0IGJ0bkluc2VydCA9ICQoXG4gICAgICAgICAgICAgICQoJy53b29jb21tZXJjZV9vcHRpb25zX3BhbmVsIC5idXR0b24uaW5zZXJ0JykuZGF0YSgncm93JykpO1xuICAgICAgICAgICAgYnRuSW5zZXJ0LmZpbmQoJy5maWxlX25hbWUgPiBpbnB1dFtuYW1lPVxcJ193Y19maWxlX25hbWVzW11cXCddJykuXG4gICAgICAgICAgICAgIHZhbChmaWxlLm5hbWUpO1xuICAgICAgICAgICAgYnRuSW5zZXJ0LmZpbmQoJy5maWxlX25hbWUgPiBpbnB1dFtuYW1lPVxcJ193Y19maWxlX2hhc2hlc1tdXFwnXScpLlxuICAgICAgICAgICAgICB2YWwoJycpO1xuICAgICAgICAgICAgYnRuSW5zZXJ0LmZpbmQoJy5maWxlX3VybCA+IGlucHV0W25hbWU9XFwnX3djX2ZpbGVfdXJsc1tdXFwnXScpLlxuICAgICAgICAgICAgICB2YWwobGluayk7XG4gICAgICAgICAgICAkKCcuZG93bmxvYWRhYmxlX2ZpbGVzIC51aS1zb3J0YWJsZScpLmFwcGVuZChidG5JbnNlcnQpO1xuICAgICAgICAgICAgaWYgKGZhbHNlID09PSAkKCcuc3N1LW9mZmxvYWQtYWRkLW1lZGlhJykucHJvcCgnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICAgIHNzdUJ0bi50YXJnZXQudGV4dCA9IE1FU1NBR0UuU1NVX0JVVFRPTl9MQUJFTDtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3N1QnRuLnRhcmdldC50ZXh0ID0gTUVTU0FHRS5TU1VfQlVUVE9OX01FRElBX1NUQVRVUztcbiAgICAgICAgICAgIGxldCB1cGxvYWRGaWxlID0ge1xuICAgICAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2V0U2l6ZUZvckltYWdlKGZpbGUsIGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICAgICAgICAgIGlmIChzaXplLndpZHRoICYmIHNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdXBsb2FkRmlsZS53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgdXBsb2FkRmlsZS5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBXUF9BUEkuY3JlYXRlQXR0YWNoTWV0YSh1cGxvYWRGaWxlLCBzaWduUmVzdWx0LnNpZ25lZFVybCxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IsIHJlcykge1xuICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgc3N1QnRuLnRhcmdldC50ZXh0ID0gTUVTU0FHRS5TU1VfQlVUVE9OX0xBQkVMO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblByb2dyZXNzOiBmdW5jdGlvbiAocGVyY2VudCkge1xuICAgICAgICAgICAgc3N1QnRuLnRhcmdldC50ZXh0ID0gTUVTU0FHRS5TU1VfQlVUVE9OX1BST0NFU1NfU1RBVFVTICsgJyAnICtcbiAgICAgICAgICAgICAgcGVyY2VudCArICclJztcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIHNzdUJ0bi50YXJnZXQudGV4dCA9IE1FU1NBR0UuU1NVX0JVVFRPTl9MQUJFTDtcbiAgICAgICAgICAgIGxvZ0Vycm9yKGBFcnJvcjogJHtzdGF0dXN9YCwgJ1dPT19VUExPQURfQlVUVE9OJyk7XG4gICAgICAgICAgICBhbGVydChNRVNTQUdFLlNTVV9GSUxFX1VQTE9BRF9FUlJPUik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmVwcm9jZXNzOiBmdW5jdGlvbiAoZmlsZSwgbmV4dCkge1xuXHRcdFx0aWYoIWlzQWxsb3dlZEZpbGVTaXplKGZpbGUpKSB7XG5cdFx0XHQgIGFsZXJ0KE1FU1NBR0UuU1NVX0ZJTEVfTUFYX0ZJTEVfRVJST1IpO1xuXHRcdFx0ICByZXR1cm47XG5cdFx0XHR9XG4gICAgICAgICAgICBXUF9BUEkuaXNGaWxlRXhpc3RlZChmaWxlLm5hbWUsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZXQgdXBsb2FkRmlsZSA9IGZpbGU7XG4gICAgICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0bXAgPSBmaWxlLm5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBleHRlbnNpb25zID0gdG1wLnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGgucm91bmQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApO1xuICAgICAgICAgICAgICAgIHRtcC5wdXNoKHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RmlsZW5hbWUgPSBgJHt0bXAuam9pbignLScpfS4ke2V4dGVuc2lvbnN9YDtcblxuICAgICAgICAgICAgICAgIC8vIFJlbmFtZSB0aGUgRmlsZSBpbiBqYXZhc2NyaXB0IChodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDczMzkwNC9yZW5hbWluZy1hLWZpbGUtb2JqZWN0LWluLWphdmFzY3JpcHQpXG4gICAgICAgICAgICAgICAgdXBsb2FkRmlsZSA9IG5ldyBGaWxlKFtmaWxlXSwgbmV3RmlsZW5hbWUsIHt0eXBlOiBmaWxlLnR5cGV9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuZXh0KHVwbG9hZEZpbGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzY3J1YkZpbGVuYW1lOiBmdW5jdGlvbiAoZmlsZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoZmlsZU5hbWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBmaWxlSW5wdXQuY2xpY2soKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHNzdUJ0bjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNzdUJ1dHRvbjtcbiIsImNvbnN0IEFwcCA9IGZ1bmN0aW9uICgkKSB7XG4gIHJldHVybiB7XG5cdGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAvLyBGaW5kIGFsbCBcIkFkZCBmaWxlXCIgYnV0dG9ucy5cblx0ICB0aGlzLmhhbmRsZVZhclByb2RPcHRzQ2hhbmdlKCk7XG5cdH0sXG5cdGhhbmRsZVZhclByb2RPcHRzQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIHBhcmVudE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmFyaWFibGVfcHJvZHVjdF9vcHRpb25zJyk7XG5cdCAgdGhpcy5vYnNlcnZlKHBhcmVudE5vZGUpO1xuXHR9LFxuXHRvYnNlcnZlOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG5cdCAgaWYoIXRhcmdldCkge1xuXHRcdHJldHVybjtcblx0ICB9XG5cdCAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgIC8vIEhhbmRsZSBET00gY2hhbmdlZCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTXV0YXRpb25PYnNlcnZlclxuXHQgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHtcblx0XHRzZWxmLnJlbmRlclNTVWJ0bigpO1xuXHQgIH0pO1xuXHQgIHZhciBjb25maWcgPSB7YXR0cmlidXRlczogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBjaGFyYWN0ZXJEYXRhOiB0cnVlLCBzdWJ0cmVlOiB0cnVlfTtcblx0ICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwgY29uZmlnKTtcblx0fSxcblx0cmVuZGVyU1NVYnRuOiBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIGluc2VydEJ0bnMgPSAkKCcud29vY29tbWVyY2VfdmFyaWF0aW9ucyAuZG93bmxvYWRhYmxlX2ZpbGVzIGEuYnV0dG9uLmluc2VydCcpO1xuXHQgIHZhciBzZWxmID0gdGhpcztcblx0ICBpbnNlcnRCdG5zLmVhY2goZnVuY3Rpb24gKGtleSwgYnRuKSB7XG5cdFx0dmFyICRjYWNoZUluc2VydEJ0biA9ICQoYnRuKTtcblx0XHQvLyBEbyBub3RoaW5nIGlmIEFkZCBmaWxlIGJ1dHRvbiBhbHJlYWR5IGhhdmluZyB0aGUgU1NVIGJ1dHRvblxuXHRcdGlmICgkY2FjaGVJbnNlcnRCdG4ubmV4dCgpLmF0dHIoJ2RhdGEtc3N1LXdvby12YXItaWQnKSkge1xuXHRcdCAgcmV0dXJuO1xuXHRcdH1cblx0XHQvLyBGaW5kIHRoZSB2YXJpYXRpb24gSUQgI3hcblx0XHR2YXIgdmFyaWF0aW9uSUQgPSAkY2FjaGVJbnNlcnRCdG5cblx0XHQgIC5jbG9zZXN0KCcud29vY29tbWVyY2VfdmFyaWFibGVfYXR0cmlidXRlcyAuZGF0YScpXG5cdFx0ICAuZmluZCgnLnVwbG9hZF9pbWFnZSBhLnVwbG9hZF9pbWFnZV9idXR0b24nKVxuXHRcdCAgLmF0dHIoJ3JlbCcpO1xuXHRcdHZhciBzc3VCdG4gPSAkKFwiPGEvPlwiLCB7XG5cdFx0ICBcImNsYXNzXCI6IFwiYnRuLXNzdSBidG4tc3N1LW9mZmxvYWRcIixcblx0XHQgIFwidGV4dFwiOiBcIk9mZmxvYWQgdG8gUzNcIixcblx0XHQgIFwiaHJlZlwiOiBcIiNcIixcblx0XHQgIFwiZGF0YS1zc3Utd29vLXZhci1pZFwiOiB2YXJpYXRpb25JRFxuXHRcdH0pO1xuXHRcdCRjYWNoZUluc2VydEJ0bi5hZnRlcihzc3VCdG4pO1xuXHQgIH0pO1xuXHR9LFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgVXRpbHMgZnJvbSAnLi9zcmMvdXRpbHMnO1xuaW1wb3J0IFNTVUJ0biBmcm9tICcuL3NyYy9zc3VCdXR0b24nO1xuaW1wb3J0IEFwcCBmcm9tICcuL3NyYy9hcHAnO1xuY29uc3QgeyBhZGRNZWRpYUNoZWNrQm94IH0gPSBVdGlscztcblxuKGZ1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgY29uc3QgYXBwID0gQXBwKCQpO1xuICAkKGZ1bmN0aW9uICgpIHtcblx0YXBwLmluaXQoKTtcblx0Y29uc3QgJGluc2VydEJ0biA9ICQoJ2EuYnV0dG9uLmluc2VydCcpO1xuXHQkaW5zZXJ0QnRuLmFmdGVyKGFkZE1lZGlhQ2hlY2tCb3goJCkpO1xuXHQkaW5zZXJ0QnRuLmFmdGVyKFNTVUJ0bigkKSk7XG4gIH0pO1xufSkoalF1ZXJ5KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=