!function(e){var t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(s,r,function(t){return e[t]}.bind(null,r));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";const s=window.ssuData.rest_url;const r={createAttachMeta:function(e,t,n){const r=new XMLHttpRequest;r.onload=()=>{const e=JSON.parse(r.responseText);r.status>=200&&r.status<300?n(null,e):n(e,null)},r.open("POST",s+"ssu/v1/wp-media");const o={"Content-Type":"application/json","Cache-control":"no-cache, no-store, must-revalidate",Pragma:"no-cache"};Object.keys(o).forEach((function(e){r.setRequestHeader(e,o[e])})),window.ssuData&&window.ssuData.nonce&&r.setRequestHeader("X-WP-Nonce",window.ssuData.nonce),r.send(JSON.stringify({signedUrl:t,file:e}))},isFileExisted:function(e,t){const n=new XMLHttpRequest;n.onload=()=>{const e=JSON.parse(n.responseText);n.status>=200&&n.status<300?t(null,e):t(e)},n.open("POST",s+"ssu/v1/s3");const r={"Content-Type":"application/json","Cache-control":"no-cache, no-store, must-revalidate",Pragma:"no-cache"};Object.keys(r).forEach((function(e){n.setRequestHeader(e,r[e])})),window.ssuData&&window.ssuData.nonce&&n.setRequestHeader("X-WP-Nonce",window.ssuData.nonce),n.send(JSON.stringify({file_name:e}))}};t.a=r},function(e,t,n){"use strict";var s=n(0);const r=window.ssuData.messages,o=e=>{if(window.ssuData&&!window.ssuData.enable_restriction)return!0;return e.size<=1e6*window.ssuData.max_file_size};t.a={addMediaCheckBox:function(e){const t=e("<input>",{type:"checkbox",class:"ssu-offload-add-media"});return e("<span>",{class:"ssu-add-media-btn"}).append(t).append("&nbsp;"+r.SSU_ADD_TO_MEDIA_OPT)},createFileBtn:function(e){const t=document.createElement("input");return t.type="file",t.onchange=e.onchange,t},createUploadBtn:function({text:e},t){return t("<a/>",{class:"button btn-ssu btn-ssu-offload",text:e,href:"#",style:"margin-left:8px"})},getSizeForImage:(e,t)=>{let n={};e.type.match(/image\/*/)||t(n);const s=URL.createObjectURL(e),r=new Image;r.onload=()=>{t({width:r.width,height:r.height})},r.src=s},preprocessS3File:(e,t)=>{o(e)?s.a.isFileExisted(e.name,(function(n,s){if(n)return void alert(n.message);let r=e;if(s){const t=e.name.split("."),n=t.pop(),s=Math.round((new Date).getTime()/1e3);t.push(s);const o=`${t.join("-")}.${n}`;r=new File([e],o,{type:e.type})}t(r)})):alert(r.SSU_FILE_MAX_FILE_ERROR)},scrubS3Filename:e=>encodeURIComponent(e),getS3OriginalLink:e=>e?e.split("?")[0]:"",logError:(e,t)=>{console.log("[SSU_ERROR]"+t,e)},isAllowedFileSize:o,MESSAGE:r}},function(e,t,n){"use strict";function s(e){for(var t in e=e||{})e.hasOwnProperty(t)&&(this[t]=e[t]);var n=this.fileElement?this.fileElement.files:this.files||[];this.handleFileSelect(n)}s.prototype.server="",s.prototype.signingUrl="/sign-s3",s.prototype.signingUrlMethod="GET",s.prototype.successResponses=[200,201],s.prototype.fileElement=null,s.prototype.files=null,s.prototype.onFinishS3Put=function(e,t){return console.log("base.onFinishS3Put()",e.publicUrl)},s.prototype.preprocess=function(e,t){return console.log("base.preprocess()",e),t(e)},s.prototype.onProgress=function(e,t,n){return console.log("base.onProgress()",e,t)},s.prototype.onError=function(e,t){return console.log("base.onError()",e)},s.prototype.onSignedUrl=function(e){},s.prototype.scrubFilename=function(e){return e.replace(/[^\w\d_\-\.]+/gi,"")},s.prototype.handleFileSelect=function(e){for(var t=[],n=0;n<e.length;n++){var s=e[n];this.preprocess(s,function(e){return this.onProgress(0,"Waiting",e),t.push(this.uploadFile(e)),t}.bind(this))}},s.prototype.createCORSRequest=function(e,t,n){n=n||{};var s=new XMLHttpRequest;return null!=s.withCredentials?(s.open(e,t,!0),null!=n.withCredentials&&(s.withCredentials=n.withCredentials)):"undefined"!=typeof XDomainRequest?(s=new XDomainRequest).open(e,t):s=null,s},s.prototype._getErrorRequestContext=function(e){return{response:e.responseText,status:e.status,statusText:e.statusText,readyState:e.readyState}},s.prototype.executeOnSignedUrl=function(e,t){var n="?objectName="+this.scrubFilename(e.name)+"&contentType="+encodeURIComponent(e.type);if(this.s3path&&(n+="&path="+encodeURIComponent(this.s3path)),this.signingUrlQueryParams){var s="function"==typeof this.signingUrlQueryParams?this.signingUrlQueryParams():this.signingUrlQueryParams;Object.keys(s).forEach((function(e){var t=s[e];n+="&"+e+"="+t}))}var r=this.createCORSRequest(this.signingUrlMethod,this.server+this.signingUrl+n,{withCredentials:this.signingUrlWithCredentials});if(this.signingUrlHeaders){var o="function"==typeof this.signingUrlHeaders?this.signingUrlHeaders():this.signingUrlHeaders;Object.keys(o).forEach((function(e){var t=o[e];r.setRequestHeader(e,t)}))}return r.overrideMimeType&&r.overrideMimeType("text/plain; charset=x-user-defined"),r.onreadystatechange=function(){if(4===r.readyState&&this.successResponses.indexOf(r.status)>=0){var n;try{n=JSON.parse(r.responseText),this.onSignedUrl(n)}catch(t){return this.onError("Invalid response from server",e,this._getErrorRequestContext(r)),!1}return t(n)}if(4===r.readyState&&this.successResponses.indexOf(r.status)<0)return this.onError("Could not contact request signing server. Status = "+r.status,e,this._getErrorRequestContext(r))}.bind(this),r.send()},s.prototype.uploadToS3=function(e,t){var n=this.createCORSRequest("PUT",t.signedUrl);if(n?(n.onload=function(){return this.successResponses.indexOf(n.status)>=0?(this.onProgress(100,"Upload completed",e),this.onFinishS3Put(t,e)):this.onError("Upload error: "+n.status,e,this._getErrorRequestContext(n))}.bind(this),n.onerror=function(){return this.onError("XHR error",e,this._getErrorRequestContext(n))}.bind(this),n.upload.onprogress=function(t){var n;if(t.lengthComputable)return n=Math.round(t.loaded/t.total*100),this.onProgress(n,100===n?"Finalizing":"Uploading",e)}.bind(this)):this.onError("CORS not supported",e,{}),n.setRequestHeader("Content-Type",e.type),this.contentDisposition){var s=this.contentDisposition;"auto"===s&&(s="image/"===e.type.substr(0,6)?"inline":"attachment");var r=this.scrubFilename(e.name);n.setRequestHeader("Content-Disposition",s+'; filename="'+r+'"')}if(t.headers){var o=t.headers;Object.keys(o).forEach((function(e){var t=o[e];n.setRequestHeader(e,t)}))}if(this.uploadRequestHeaders){var i=this.uploadRequestHeaders;Object.keys(i).forEach((function(e){var t=i[e];n.setRequestHeader(e,t)}))}else n.setRequestHeader("x-amz-acl","public-read");return this.httprequest=n,n.send(e)},s.prototype.uploadFile=function(e){var t=this.uploadToS3.bind(this,e);return this.getSignedUrl?this.getSignedUrl(e,t):this.executeOnSignedUrl(e,t)},s.prototype.abortUpload=function(){this.httprequest&&this.httprequest.abort()},t.a=s},function(e,t,n){"use strict";n.r(t);var s=n(2),r=n(1),o=n(0);const{createFileBtn:i,MESSAGE:a,getSizeForImage:u,preprocessS3File:c,scrubS3Filename:l,getS3OriginalLink:p,logError:d}=r.a;!function(e){function t(t,n){const s=e(e(this).data("row"));s.find("input[name='_wc_file_names[]']").val(n),s.find("input[name='_wc_file_hashes[]']").val(""),s.find("input[name='_wc_file_urls[]']").val(t),e(this).closest("table").find("tbody").append(s)}e((function(){e("body").on("click","a.ssu-offload-file-row",(function(n){n.preventDefault();const r=n.target.text;if(r.includes(a.SSU_BUTTON_PROCESS_STATUS)||r.includes(a.SSU_BUTTON_MEDIA_STATUS))return;const h=n,f=this;i({onchange:function(n){new s.a({fileElement:n.target,signingUrl:window.ssuData.rest_url+"ssu/v1/s3/sign",signingUrlMethod:"GET",uploadRequestHeaders:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0","X-WP-Nonce":window.ssuData.nonce,contentDisposition:"auto"},onFinishS3Put:function(n,s){const r=n.signedUrl?p(n.signedUrl):"";if(t.apply(f,[r,s.name]),!1===e(".ssu-offload-add-media").prop("checked"))return h.target.text=a.SSU_BUTTON_LABEL,!1;h.target.text=a.SSU_BUTTON_MEDIA_STATUS,function(e,t,n){let s={name:e.name};u(e,(function(e){e.width&&e.height&&(s.width=e.width,s.height=e.height),o.a.createAttachMeta(s,t.signedUrl,n)}))}(s,n,(function(e){return e&&alert(e.message),h.target.text=a.SSU_BUTTON_LABEL,!1}))},onProgress:function(e){h.target.text=a.SSU_BUTTON_PROCESS_STATUS+" "+e+"%"},onError:function(e){h.target.text=a.SSU_BUTTON_LABEL,d("Error: "+e,"WOO_UPLOAD_BUTTON"),alert(a.SSU_FILE_UPLOAD_ERROR)},preprocess:c,scrubFilename:l})}}).click()}))}))}(jQuery)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,